#!/bin/sh

set -e

# Upper bound of how much space (in bytes) needed for building Tails
BUILD_SPACE_REQUIRED=6979321856

usable_memory() {
	free -b | awk '/cache:/ { print $4 }'
}

cleanup() {
	[ -n "$BUILD_DIR" ] || return 0
	cd /
	mounts=$(mount | grep -E "^[^[:space:]]+ on $BUILD_DIR" | \
		awk '{print $3}' | sort -r)
	[ -n "$mounts" ] && umount $mounts
	[ -d "$TMPFS_DIR" ] && ( umount $TMPFS_DIR ; rmdir $TMPFS_DIR )
	[ -d "$BUILD_DIR" ] && rm -rf $BUILD_DIR
}

trap cleanup EXIT

if [ -n "$JENKINS_URL" ]; then
	# Build triggered by Jenkins
	ENV_FILE=/etc/jenkins/environment
	if [ -f "$ENV_FILE" ] && [ -r "$ENV_FILE" ] ; then
		. "$ENV_FILE"
	fi

	if [ -z "$WORKDIR" ]; then
		echo "WORKDIR environment variable is not set. Aborting." >&2
		exit 2
	fi
	if [ -z "$ARTIFACTS_ROOT_DIR" ] ; then
		echo "ARTIFACTS_ROOT_DIR environment variable is not set. Aborting." >&2
		exit 3
	fi
	if [ -z "$GIT_BRANCH" ]; then
		echo "GIT_BRANCH environment variable is not set. Aborting." >&2
		exit 4
	fi
	if [ -z "$GIT_COMMIT" ]; then
		echo "GIT_COMMIT environment variable is not set. Aborting." >&2
		exit 5
	fi
	REV="${GIT_BRANCH##origin/}"
	COMMIT="$GIT_COMMIT"
	ARTIFACTS_DIR="$ARTIFACTS_ROOT_DIR/$JOB_NAME"
else
	# WORKDIR refers to Docker's WORKDIR, i.e. the host's Tails sources
	WORKDIR=/root/tails
	GIT_DIR="${WORKDIR}/.git"
	ARTIFACTS_DIR="${WORKDIR}"
	COMMIT="$(git --git-dir="${GIT_DIR}" rev-parse --verify HEAD)"
	if git --git-dir="${GIT_DIR}" symbolic-ref HEAD >/dev/null 2>&1; then
		# We are building from a branch
		REV="${1:-$(git --git-dir="${GIT_DIR}" name-rev --name-only HEAD)}"
	else
		# We are (hopefully) building from a tag
		if ! REV="${1:-$(git --git-dir="${GIT_DIR}" describe --tags --exact-match ${COMMIT})}"; then
			echo "It seems we are building from an untagged detached HEAD. Aborting." >&2
			exit 1
		fi
	fi
fi

BUILD_DIR=$(mktemp -d /root/tails-build.XXXXXXXX)
if [ "$(usable_memory)" -ge "${BUILD_SPACE_REQUIRED}" ]; then
	TMPFS_DIR=$(mktemp -d /root/tails-build-tmpfs.XXXXXXXX)
	mount -t tmpfs -o "noatime,size=${BUILD_SPACE_REQUIRED}" tmpfs "${TMPFS_DIR}"
	mount -t aufs -o "noatime,noxino,dirs=${TMPFS_DIR}=rw:${WORKDIR}/=rr+wh" aufs "${BUILD_DIR}"
else
	cp -a "${WORKDIR}/.git" "${BUILD_DIR}/.git"
fi

cd "${BUILD_DIR}"
git checkout --force "${REV}"
git reset --hard "${COMMIT}"
lb clean --all
lb config --cache false
lb build

if [ -n "$JENKINS_URL" ]; then
	ISO=$(ls *.iso)

	USER_ON_ACNG_HOST=jenkins
	ACNG_HOST=apt-proxy.lizard
	ACNG_REMOTE_LOG=/var/log/apt-cacher-ng/apt-cacher.log
	ACNG_LOCAL_LOG=$(basename "$ACNG_REMOTE_LOG")
	sftp "${USER_ON_ACNG_HOST}@${ACNG_HOST}:${ACNG_REMOTE_LOG}"
	BUILD_IP=$(ip a show dev eth0 | grep '^\s\+inet\s' | awk '{print $2}' | sed -e 's,/.*,,')
	START_TIME=$(cat "$ISO.start.timestamp")
	END_TIME=$(cat "$ISO.end.timestamp")
	./auto/scripts/packages-from-acng-log "$ACNG_LOCAL_LOG" "$BUILD_IP" \
					      "$START_TIME" "$END_TIME" \
					      "${ISO}.binpkgs" "${ISO}.srcpkgs"
	rm "$ISO".*.timestamp

	for file in tails-*; do
		sha512sum "$file" >> "$ISO.shasum"
	done
	gpg --batch --detach-sign --armor "$ISO.shasum"
fi

mv -f tails-* "$ARTIFACTS_DIR"

if [ -n "$JENKINS_URL" ]; then
	for EXT in '' .binpkgs .srcpkgs .shasum .shasum.asc .packages .buildlog ; do
		ln -sf "${ISO}${EXT}" "$ARTIFACTS_DIR/latest.iso${EXT}"
	done
fi

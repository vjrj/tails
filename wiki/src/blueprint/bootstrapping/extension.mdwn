[[!meta title="Automatic ISO verification extension for Firefox"]]

As part of our effort to simplify the workflow of a new user getting
started with Tails, we are working on a custom browser extension to
automate some verification of the ISO image after it has been
downloaded.

This has to be considered as part of a bigger plan to:

  - Further automate ISO verification. See the blueprint on [[ISO
    verification|verification]].
  - Guide the user through the whole process. See the blueprint on the
    [[web assistant]].

The extension will be used as well by people doing full upgrades until
we automate the download and verification steps of a full upgrade in
Tails Upgrader. See the blueprint on [[upgrades|upgrade]].

[[!toc]]

Goals
=====

  - Fix the ISO verification method using Windows which has been broken
    for years.
  - Simplify the installation process by automating *some* verification
    of the ISO image inside the browser as part of the download process.
  - Allow users who are downloading using BitTorrent to do the same
    level of verification as people downloading through their browser.
  - In case of a bad ISO image, help the user diagnose whether the
    download has been interrupted or the ISO has been corrupted.
  - Allow users to install the extension without restarting the browser.
  - Have the extension available in Firefox first, then Chrome. Firefox
    makes sense as a first target because it is the base for Tor Browser
    and is installed by default in Debian and Ubuntu. But Chrome is much
    more popular. Usage share of web browsers are currently on
    [Wikimedia](https://en.wikipedia.org/wiki/Usage_share_of_web_browsers):
    - Chrome: 48.1%
    - Internet Explorer: 17.5%
    - Firefox: 16.7%
    - Safari: 4.8%
    - Opera: 1.5%
    - Other: 11.4%

Non goals
=========

  - Verify deprecated ISO images.
  - Verify ISO images downloaded from nightly.tails.boum.org.

<a id="scenario"></a>

User scenario
=============

This scenario represents the UX side of things. It has to be refined
depending on the technical limitations of a browser extension, and the
broader wireframe of the web assistant. This should be clarified by the
beginning of April but not before. See [[!tails_ticket 8584]] and
[[!tails_ticket 8564]].

HTTP download
-------------

  - When the user clicks on the HTTP download button from the [[download
    page|download#index2h1]], we propose to install the extension.
  - The user allows the installation of the extension.
  - The extension starts the download and the user decides where to save
    the ISO.
  - The webpage is modified and displays a progress bar of the download.
  - The user might or might not close the webpage.
  - The download also appears in the usual list of downloads of the
    browser.

Torrent download
----------------

  - If a user has downloaded the ISO using BitTorrent, she can verify it
    as well as using the extension as part of the web assistant.

ISO verification
----------------

  - After the image has been downloaded, the web assistant leads the
    user through the ISO verification process.
  - The extension checks the size of the download to verify that the download
    was complete.
  - If the download was complete, the extension verifies the ISO image.
  - The extension renames the ISO image from tails-i386-x.x.x-UNVERIFIED.iso to:
    - `tails-i386-x.x.x-INCOMPLETE.iso` if the download was incomplete.
    - `tails-i386-x.x.x-VERIFIED.iso` if the verification is successfully.
    - `tails-i386-x.x.x-CORRUPTED.iso` if the verification fails.
  - The extension displays the result to the user.
  - According to the result, the web assistant proposes to either:
      - Continue with the installation (if VERIFIED).
      - Download the ISO again (if INCOMPLETE).
      - Proposes troubleshooting strategies (if CORRUPTED).

Open questions
--------------

  - Will the extension be able to read and possibly rename an ISO image
    downloaded by the user not through the extension itself? For example
    if it is a Torrent download, or if it is downloaded first, then the
    browser is closed and reopen, or downloaded using a different
    method?
  - If the extension is installed, are we sure to be able to detect it
    automatically? For example in Tor Browser of if JavaScript is
    disabled?

<a id="verification"></a>

ISO verification mechanisms
===========================

We are considering three possible verification mechanisms, each of those
have to be checked against feasibility and overall security. By order of
preference:

  1. [[OpenPGP signature verification|extension#openpgp]].
  2. [[Checksum correlation|extension#correlation]].
  3. [[Single checksum|extension#checksum]].

We are considering here an attacker who can:

  - (A) Provide a malicious ISO image to the user for example by
    operating a rogue Tails mirror or BitTorrent tracker.
  - (B) Do man-in-the-middle attacks by providing rogue HTTPS
    certificates signed by a single certificate authority trusted by the
    browser but under the control of the attacker.
    Note that if the MitM attack is conducted against tails.boum.org,
    then the attacker could trick the user to skip ISO verification all
    the way. This would work in the vast majority of cases since we are
    trying to help new user with this extension. Still, to mitigate such
    an attack in some cases we could both:
    - Encourage external documentation (screencasts on YouTube, printed
      forms, etc.). But those would be vulnerable to other kind of
      attacks...
    - Not rely on the website to perform the ISO verification (use the
      add-ons menu for example). But the UX will suffer from this...

We are not considering an attacker who can:

  - (C) Insert malicious content on https://tails.boum.org/ through an
    exploit on our website as this could trick new users to skip the ISO
    verification all the way. To prevent this kind of attack we should
    instead:
    - Monitor externally the most relevant parts of our website.
    - Work on integrating full upgrades in Tails Upgrader
      [[!tails_ticket 7499]].
  - (D) Insert malicious information in our main Git repository as such
    an attacker could do attack (C) as well.
  - (E) Insert targeted malware on the user's computer as this could
    defeat any possible verification mechanism that such an extension
    could do.
  - (F) Provide a rogue extension to the user as this could defeat any
    possible verification mechanism that such an extension could do.
  - (G) Do man-in-the-middle attacks by providing rogue HTTPS
    certificates signed by any certificate authority as such an attacker
    could probably do attack (F) as well.

We should also keep in mind how would the extension upgrade in case of
change in either the Tails signing key (rotation or revocation) or the
certificates it relies upon. If we need to upgrade the extension:

  - In Firefox, it has to go through a manual review process that can
    take several days.
  - In Chrome, it can be uploaded directly to the store by us.

<a id="openpgp"></a>

OpenPGP signature verification
------------------------------

The code of the extension includes:

  - The [OpenPGP.js](http://openpgpjs.org) library.
  - A keyring with the public Tails signing key.

When verifying an ISO image, the extension:

  - Downloads from https://tails.boum.org/ an ISO description document
    (size, checksum) signed by the Tails signing key.
  - Verifies the document against the Tails signing key included in the
    extension.
  - If the document cannot be verified, then the user is informed that
    the verification process failed.
  - Else the ISO image is verified against the document (first its size,
    then its checksum).

Security properties:

  - This technique would defeat attack A (malicious ISO) and still allow
    our users to verify their ISO images after using an alternative
    download technique.
  - This technique would not defeat attack B (single MitM against
    tails.boum.org) in general but could be detected
    under certain circumstances (if experienced user or following
    external documentation and extension not relying on website).

Other considerations:

  - In case we need to rotate the Tails signing key, we can upload in
    advance a new version of the extension that includes both the old
    and the new key and the transition will be smooth.

Checksum correlation
--------------------

The code of the extension includes:

  - The description of a pool of *P* HTTPS websites. For example,
    tails.boum.org, immerda.ch, and github.com that we can all update
    automatically through Git.
  - The root certificate of the authorities expected to sign the
    certificate of each website in this pool.

When verifying an ISO image, the extension:

  - Connects to each website in the pool and verifies its certificate
    against its expected authority.
  - If the certificate is trusted, then it downloads from each website
    an ISO description document (size, checksum).
  - Compares those documents.
  - If all versions of the document are identical, then the ISO image is
    verified against the document (first its size, then its checksum).
  - If only *N* versions of the document are identical, then a problem
    with the corrupted websites is reported and the ISO image is
    verified against the ones who are identical (first its size, then
    its checksum).
  - If less than *N* versions of the document are identical, then the
    user is informed that the verification process failed.

Security properties:

  - This technique would defeat attack A (malicious ISO) and still allow
    our users to verify their ISO images possibly after using an
    alternative download technique.
  - This technique would defeat attack B (single MitM) against a server
    in the pool different from tails.boum.org.
  - This technique would not defeat attack B (single MitM against
    tails.boum.org) in general but could be detected under certain
    circumstances (if experienced user or following external
    documentation and extension not relying on website).

Other considerations:

  - We would have to upgrade the extension every time a website in the
    pool changes its certificate authority and we will not always be
    able to know this in advance (for example if we rely on Github). So
    having a bigger pool has some cost.
  - Reporting errors in case *N* but not all versions of the ISO
    description document are identical might be interesting for us but
    complicated to communicate to the user.

Single checksum
---------------

The code of the extension includes:

  - The root certificate of the authority expected to sign the
    certificate of https://tails.boum.org/.

When verifying an ISO image, the extension:

  - Connects to https://tails.boum.org/ and verifies its certificate
    against its expected authority.
  - If the certificate is trusted, then it downloads an ISO description
    document (size, checksum).
  - Verifies the ISO image against the document (first its size, then
    its checksum).

Security properties:

  - This technique would defeat attack A (malicious ISO).
  - This technique would not defeat attack B (single MitM against
    tails.boum.org).

Other considerations:

  - We would have to upgrade the extension if the certificate authority
    of https://tails.boum.org/ changes but we should know this in
    advance.

#!/bin/sh

set -e

BLACKLIST=/etc/modprobe.d/all-net-blacklist.conf

rm -f "${BLACKLIST}"
if [ -e "${BLACKLIST}" ]; then
    log "${BLACKLIST} wasn't removed so the network will still be blocked"
fi

# Now we'll load any present network device previously blocked by
# BLACKLIST. In particular, the MAC spoofing udev rule should trigger
# for each network device added.
/sbin/udevadm trigger --action=add

# Make this script block until all triggers have been run. We normally
# start NetworkManager immediately after this script, and without the
# blocking behaviour there's a race between NM and the MAC spoof udev
# triggers. When NM takes control of some network device, some
# operations are not possible on the device, like MAC spoofing. Hence,
# if NM wins, the udev trigger's run of tails-spoof-mac will fail.
/sbin/udevadm settle

# Enable NetworkManager services
# No need to manually enable NetworkManager-dispatcher.service,
# as NetworkManager.service has "Also=NetworkManager-dispatcher.service"
# in its [Install] section.
systemctl enable NetworkManager.service
systemctl enable NetworkManager-wait-online.service
systemctl start NetworkManager-dispatcher.service
systemctl start NetworkManager.service
systemctl start NetworkManager-wait-online.service
